# https://leetcode.com/discuss/interview-question/system-design/3616948/golden-rules-to-answer-in-a-system-design-interview
# DS : Set, Dict, Heap, Stack, Queue, Linked List, Binary Tree, Graph, Trie
# Algo : MergeSort, QuickSort, Heapsort, Bubble, Insertion, Selection, Binary Search,
#        2D Matrix traversal, Dynamic Programming, BFS, DFS, Parent Rank Union, Dijkstras, Greedy
# Technique : Preprocessing, Backtracking, Frequency Count, Recursion, Custom Comparator,
#             Sliding Window, K Remainder, Bit Vector, Left and right max array

# TODO :: add Prim, heapsort algo

questionMap = dict()

questionMap['Asked'] = {'01_array/16_find_kth_largest_in_stream',
                        '01_array/19_next_greater',
                        '01_array/24_most_frequent_k',
                        '02_string/06_chk_anagram',
                        '03_linkedList/03_merge_two_list',
                        '03_linkedList/11_merge_k_sorted_list',
                        '03_linkedList/14_clone_double_linked',
                        '03_linkedList/16_reverse_list_in_group',
                        '03_linkedList/17_point_arbitary_to_next_higher',
                        '03_linkedList/19_merge_second_half',
                        '04_tree/01_left_view_of_tree',
                        '04_tree/08_LCA',
                        '04_tree/36_find_duplicate_subtree',
                        '04_tree_bst/02_kth_largest_element_in_bst',
                        '07_hashing/03_count_distinct_element_in_window',
                        '08_graph/07_find_path_exist',
                        '10_dynamic_programming/15_count_possible_decoding',
                        '12_backtracking/03_count_possible_path',
                        '12_backtracking/04_print_all_possible_path',
                        '14_trie/09_left_right_of_prefix',
                        '21_firstFolder/06_count_island_in_matrix',
                        '21_firstFolder/50_subsequnce_sum_divisble_by_n',
                        '22_secondFolder/08_find_next_bigger_number',
                        '22_secondFolder/09_celebrity_problem',
                        '22_secondFolder/25_make_most_coin_equal',
                        '23_thirdFolder/04_sorted_matrix_search',
                        '25_fifthFolder/33_drop_off_center',
                        '25_fifthFolder/41_farthest_node_in_set',
                        '26_sixthFolder/17_common_trigram_count',
                        '27_seventhFolder/21_multiply_num_in_str',
                        '27_seventhFolder/26_ls_output',
                        '27_seventhFolder/31_process_scheduler'
                        }

questionMap['Standard'] = {'01_array/04_longest_increasing_subsequnce',
                           '01_array/29_chocolate_distribution_consecutive',
                           '02_string/03_longest_palindrome_substring',
                           '02_string/07_longest_common_substring',
                           '02_string/17_bucket_sort',
                           '02_string/15_kmp_algorithm',
                           '03_linkedList/13_rotten_orange',
                           '04_tree/03_bottom_view_binary_tree',
                           '04_tree_bst/09_inorder_next_data_in_bst',
                           '04_tree_bst/10_delete_node_in_BST',
                           '05_heap/07_connect_n_ropes',
                           '07_hashing/05_longest_consecutive_subsequence',
                           '08_graph/04_dijkstra',
                           '08_graph/10_ford_warshall',
                           '08_graph/11_alien_dictionary',
                           '08_graph/13_knight_problem_min_step',
                           '09_greedy/09_minimum_spanning_tree',
                           '10_dynamic_programming/04_edit_distance',
                           '10_dynamic_programming/25_box_stacking',
                           '11_divide_and_conquer/07_quick_sort',
                           '14_trie/05_auto_complete',
                           '27_seventhFolder/17_max_prod_array',
                           '27_seventhFolder/19_max_sub_array',
                           '27_seventhFolder/23_find_all_triplet',
                           '27_seventhFolder/34_single_number',
                           }

questionMap['Important'] = {'01_array/01_find_missing_number',
                            '01_array/06_minimum_platform',
                            '01_array/09_find_kth_small_element',
                            '01_array/10_rainwater_trapping',
                            '01_array/18_print_matrix_in_spiral',
                            '01_array/22_merge_to_make_palindrome',
                            '01_array/32_zero_matrix',
                            '02_string/11_longest_common_prefix',
                            '02_string/12_longest_substring_with_k_unique_char',
                            '02_string/23_unique_char_without_map',
                            '02_string/33_decompress_string',
                            '03_linkedList/02_detect_and_remove_loop',
                            '04_tree/05_level_order_in_spiral_form',
                            '04_tree/11_max_path_sum_in_binary_tree',
                            '04_tree/12_diameter_of_binary_tree',
                            '04_tree/15_serialize_deserialze_a_binary_tree',
                            '04_tree/22_tree_equal_to_subtree',
                            '04_tree/28_isophormic_tree',
                            '04_tree/29_convert_postorder_inorder_to_tree',
                            '04_tree_bst/01_check_BST',
                            '04_tree_bst/03_kth_smallest_element_in_bst',
                            '05_heap/01_median_in_stream',
                            '07_hashing/04_array_pair_sum_divisibility',
                            '09_greedy/02_make_change_with_min_coin',
                            '08_graph/08_min_cost_path_in_matrix',
                            '08_graph/09_circle_of_string',
                            '09_greedy/04_page_fault_in_LRU',
                            '09_greedy/08_max_len_chain',
                            '10_dynamic_programming/02_knapsack',
                            '10_dynamic_programming/03_minimum_jump',
                            '10_dynamic_programming/05_all_possible_coin_change',
                            '10_dynamic_programming/10_count_ways_to_cover_distance',
                            '10_dynamic_programming/17_gold_mine',
                            '10_dynamic_programming/33_longest_consecutive_path_in_matrix',
                            '10_dynamic_programming/34_assembly_line',
                            '21_firstFolder/04_max_submatrix',
                            '21_firstFolder/15_rotate_matrix_by_90',
                            '21_firstFolder/21_max_steal_house',
                            '21_firstFolder/23_find_x_in_sorted_rotated_array',
                            '21_firstFolder/25_next_bigger_palindrome',
                            '21_firstFolder/29_couple_holding_hands',
                            '21_firstFolder/30_redundant_connection',
                            '22_secondFolder/35_word_break',
                            '22_secondFolder/43_buy_sell_stock_2_at_max',
                            '23_thirdFolder/15_baby_names',
                            '23_thirdFolder/26_confusing_number',
                            '23_thirdFolder/37_palindromic_substring',
                            '23_thirdFolder/47_my_calendar_3',
                            '24_fourthFolder/06_sensor_in_room',
                            '24_fourthFolder/07_max_distance_on_bench',
                            '24_fourthFolder/11_merge_overlapping_intervals',
                            '24_fourthFolder/14_find_min_in_rotated',
                            '24_fourthFolder/32_minimum_refueling',
                            '25_fifthFolder/38_insert_interval',
                            '25_fifthFolder/39_clone_graph',
                            '26_sixthFolder/10_pacific_water_flow',
                            '26_sixthFolder/13_sliding_window_median',
                            '26_sixthFolder/32_bus_routes',
                            '26_sixthFolder/40_koko_banana',
                            '26_sixthFolder/49_combination_sum',
                            '27_seventhFolder/02_swim_in_rising_water',
                            '27_seventhFolder/24_sort_colors',
                            '27_seventhFolder/25_partition_equal_sum',
                            '27_seventhFolder/32_max_bomb_detonate'
                            }

if __name__ == "__main__":
    question_count = 0
    for qType, set_items in questionMap.items():
        print(qType, len(set_items))
        question_count += len(set_items)
    print('Total', question_count)
